pipeline {
 agent any

                 

   
    stages { 

        

     stage('maven build and test') {
            steps {	           
                sh 'ls -ltr'	
                sh 'mvn clean package -Dskiptests=true -Dcheckstyle.skip  '
                                  }
                                       }
     
    stage('maven compile') {
            steps {	            
              	                
               sh 'mvn compile -Dskiptests=true -Dcheckstyle.skip '
                       }
                          }


  
         

       
       stage('snyk scan') {
            steps {
                      
                  snykSecurity( 
                    snykInstallation: 'snyk@latest', 
                    snykTokenId: 'snyk_api_token', 
                    monitorProjectOnBuild: false,
                    failOnIssues: 'false', 
                    additionalArguments: '--json-file-output=all-vulnerabilities.json'
                )     
                 


            }
        }
      

        
      stage('Static Code Analysis') {
        environment {
          SONAR_URL = "http://3.111.76.181:9000"
         }
               steps {
                    withCredentials([string(credentialsId: 'SONAR_AUTH_TOKEN', variable: 'SONAR_AUTH_TOKEN')]) {
                          sh ' mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
                                  }
                                   }
                                            } 



    







       stage('building a docker image  ') {
         steps{
           script {
             sh "docker build -t deepak8934/petapp:${BUILD_NUMBER} ."
             
                
        }
          
      }
    } 
         
     stage('docker image push'){
           steps{
              script { withDockerRegistry(credentialsId: 'dockercred', url: ''){
                  sh " docker push  deepak8934/petapp:${BUILD_NUMBER} "} }
                                       }
          
                                                                      
                                                






}
 
      
        
    }
}

